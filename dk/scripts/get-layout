#!/bin/bash
# DK layout manager - display current layout and handle cycling

# Layout file to track current layout
LAYOUT_FILE="/tmp/dk-current-layout"

# Define layout order for cycling
LAYOUTS=("tile" "rtile" "spiral" "dwindle" "grid" "mono" "none")

# Function to get layout info
get_layout_info() {
    local layout="$1"
    case "$layout" in
        "tile")    icon="󰙀"; name="Tile" ;;
        "rtile")   icon="󱒅"; name="Right Tile" ;;  
        "mono")    icon="󱟱"; name="Monocle" ;;
        "grid")    icon="󰓰"; name="Grid" ;;
        "spiral")  icon="󱒋"; name="Spiral" ;;
        "dwindle") icon="󱒌"; name="Dwindle" ;;
        "none")    icon="󰖲"; name="Floating" ;;
        *)         icon="󱒋"; name="Spiral" ;;
    esac
}

# Handle cycling if argument is provided
if [ "$1" = "cycle" ]; then
    # Get current layout
    if [ -f "$LAYOUT_FILE" ]; then
        current_layout=$(cat "$LAYOUT_FILE")
    else
        current_layout="spiral"
    fi

    # Find current layout index
    current_index=-1
    for i in "${!LAYOUTS[@]}"; do
        if [[ "${LAYOUTS[$i]}" == "$current_layout" ]]; then
            current_index=$i
            break
        fi
    done

    # Calculate next layout index (wrap around)
    if [ $current_index -eq -1 ]; then
        next_index=0
    else
        next_index=$(( (current_index + 1) % ${#LAYOUTS[@]} ))
    fi

    # Get next layout
    next_layout="${LAYOUTS[$next_index]}"

    # Apply the layout using dkcmd
    dkcmd set layout "$next_layout"

    # Update the layout file
    echo "$next_layout" > "$LAYOUT_FILE"

    # Show notification
    get_layout_info "$next_layout"
    notify-send "Layout Changed" "$name"
    exit 0
fi

# Default behavior: display current layout for polybar
if [ -f "$LAYOUT_FILE" ]; then
    layout=$(cat "$LAYOUT_FILE")
else
    # Default to spiral
    layout="spiral"
fi

get_layout_info "$layout"

# Output with tooltip (polybar format)
echo "%{A3:notify-send 'Layout' '$name':}$icon%{A}"